import ollama
import argparse
import random
from PIL import Image, ImageDraw, ImageFont
import os
import torch
from diffusers import AutoPipelineForText2Image, StableVideoDiffusionPipeline
from diffusers.utils import export_to_video
from dotenv import load_dotenv

load_dotenv()

# === –ê—Ä–≥—É–º–µ–Ω—Ç—ã ===
parser = argparse.ArgumentParser()
parser.add_argument('--generate-video', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ VRAM)')
args = parser.parse_args()
# args.generate_video = True  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å

# === –¶–≤–µ—Ç–∞ ===
COLORS = {
    '–†–∞—Å—Å–∫–∞–∑—á–∏–∫': '\033[94m',
    '–†–µ–±—ë–Ω–æ–∫': '\033[92m',
    '–†–µ–¥–∞–∫—Ç–æ—Ä': '\033[93m',
    '–°–∫–∞–∑–∫–∞': '\033[95m',
    '–≠—Ç–∞–ø': '\033[1;97m',
    '–í–∏–¥–µ–æ': '\033[96m',
    'ENDC': '\033[0m'
}

# === –ú–æ–¥–µ–ª–∏ ===
print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
# –ê–∫—Ç—É–∞–ª—å–Ω–æ –≤ —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ transformers


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
print("üé® –ó–∞–≥—Ä—É–∑–∫–∞ SDXL-Turbo...")
pipe_sdxl = AutoPipelineForText2Image.from_pretrained(
    "stabilityai/sdxl-turbo",
    torch_dtype=torch.float16,
    variant="fp16",
    use_safetensors=True
)
pipe_sdxl.to("cuda")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (XT)
pipe_svd = None
if args.generate_video:
    print("üé• –ó–∞–≥—Ä—É–∑–∫–∞ Stable Video Diffusion XT 1.1...")
    pipe_svd = StableVideoDiffusionPipeline.from_pretrained(
        "stabilityai/stable-video-diffusion-img2vid-xt-1-1",
        torch_dtype=torch.float16,
        variant="fp16",
        token=os.environ["HF_TOKEN"],
    )
    pipe_svd.to("cuda")


# === –ê–≥–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Ollama ===
class Agent:
    def __init__(self, name, system_prompt, model="qwen:14b-chat-q4_K_M"):
        self.name = name
        self.system_prompt = system_prompt
        self.model = model

    def respond(self, prompt):
        response = ollama.generate(
            model=self.model,
            prompt=f"{self.system_prompt}\n\n{prompt}",
            options={
                'temperature': 0.6,
                'top_p': 0.95,
                'top_k': 30,
                'num_ctx': 8192
            }
        )
        return response['response'].strip()


# === –¢–µ–º–∞ –∏ —ç—Ç–∞–ø—ã ===
PLOT_TEMPLATES = [
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°–ø–∞—Å–µ–Ω–∏–µ –ø–æ—Ö–∏—â–µ–Ω–Ω–æ–π —Ü–∞—Ä–µ–≤–Ω—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ó–º–µ–π —É–Ω—ë—Å —Ü–∞—Ä–µ–≤–Ω—É. –ì–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å.",
        "–ø—Ä–æ–º–ø—Ç": "–¶–∞—Ä–µ–≤–Ω—É –ø–æ—Ö–∏—Ç–∏–ª –∑–º–µ–π, –∏ –¥–æ–±—Ä—ã–π –º–æ–ª–æ–¥–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –µ—ë —Å–ø–∞—Å–∞—Ç—å."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–æ–∏—Å–∫–∏ –∂–∏–≤–æ–π –≤–æ–¥—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¶–∞—Ä—å –±–æ–ª–µ–Ω ‚Äî –Ω—É–∂–Ω–∞ –≤–æ–¥–∞ –∑–∞ —Ç—Ä–∏–¥–µ–≤—è—Ç—å –∑–µ–º–µ–ª—å.",
        "–ø—Ä–æ–º–ø—Ç": "–¶–∞—Ä—å –∑–∞–±–æ–ª–µ–ª ‚Äî –Ω—É–∂–Ω–∞ –∂–∏–≤–∞—è –≤–æ–¥–∞ –∑–∞ —Ç—Ä–∏–¥–µ–≤—è—Ç—å –∑–µ–º–µ–ª—å."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –±—Ä–∞—Ç–∞ –≤ –ª—è–≥—É—à–∫—É",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ë—Ä–∞—Ç –∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω. –°–µ—Å—Ç—Ä–∞ –∏—â–µ—Ç —Å–ø–æ—Å–æ–± —Å–Ω—è—Ç—å –∑–∞–∫–ª—è—Ç–∏–µ.",
        "–ø—Ä–æ–º–ø—Ç": "–ë—Ä–∞—Ç –ø—Ä–µ–≤—Ä–∞—â—ë–Ω –≤ –ª—è–≥—É—à–∫—É ‚Äî –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –∑–∞–∫–ª—è—Ç–∏–µ."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–¢—Ä–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ë–∞–±—ã-–Ø–≥–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–µ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —Ç—Ä–∏ —Ç—Ä—É–¥–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è.",
        "–ø—Ä–æ–º–ø—Ç": "–ì–µ—Ä–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –ë–∞–±–µ-–Ø–≥–µ –∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —Ç—Ä–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°–∫–∞–∑–æ—á–Ω—ã–π –±—Ä–∞–∫ –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ú–ª–∞–¥—à–∏–π –±—Ä–∞—Ç –∂–µ–Ω–∏—Ç—Å—è –Ω–∞ —Ü–∞—Ä–µ–≤–Ω–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞—Å–º–µ—à–∫–∏.",
        "–ø—Ä–æ–º–ø—Ç": "–ú–ª–∞–¥—à–∏–π –±—Ä–∞—Ç –∂–µ–Ω–∏—Ç—Å—è –Ω–∞ —Ü–∞—Ä–µ–≤–Ω–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞—Å–º–µ—à–∫–∏."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–æ–±–µ–¥–∞ –Ω–∞–¥ –ª–æ–∂–Ω—ã–º –≥–µ—Ä–æ–µ–º",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π —Ä–∞–∑–æ–±–ª–∞—á—ë–Ω –Ω–∞ —Å–≤–∞–¥—å–±–µ.",
        "–ø—Ä–æ–º–ø—Ç": "–õ–æ–∂–Ω—ã–π –≥–µ—Ä–æ–π –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∑–∞—Å–ª—É–≥–∏, –Ω–æ –ø—Ä–∞–≤–¥–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ì–µ—Ä–æ–π –∏–∑ –±–µ–¥–Ω—è–∫–æ–≤",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–∏—Ä–æ—Ç–∞ —Å–ø–∞—Å–∞–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ—Ä–æ–ª—ë–º.",
        "–ø—Ä–æ–º–ø—Ç": "–°–∏—Ä–æ—Ç–∞ —Å–ø–∞—Å–∞–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ—Ä–æ–ª—ë–º."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–í–æ–ª—à–µ–±–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–µ—Ä–µ–≤–æ –¥–∞—ë—Ç –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ, –Ω–æ —Å —É—Å–ª–æ–≤–∏–µ–º.",
        "–ø—Ä–æ–º–ø—Ç": "–í–æ–ª—à–µ–±–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–∞—ë—Ç –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ, –Ω–æ —Å —É—Å–ª–æ–≤–∏–µ–º."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ö–ª—é—á –æ—Ç –ø–æ–¥–∑–µ–º–µ–ª—å—è",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–µ—Ä–æ–π –∏—â–µ—Ç –∫–ª—é—á, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –≤ —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä—ã.",
        "–ø—Ä–æ–º–ø—Ç": "–ì–µ—Ä–æ–π –∏—â–µ—Ç –∫–ª—é—á, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –≤ —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä—ã."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–µ—Å–Ω—è, –ø—Ä–æ–±—É–∂–¥–∞—é—â–∞—è –∫–∞–º–Ω–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç –æ–∂–∏–≤–∏—Ç—å –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥.",
        "–ø—Ä–æ–º–ø—Ç": "–¢–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç –æ–∂–∏–≤–∏—Ç—å –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ó–µ—Ä–∫–∞–ª–æ –ø—Ä–∞–≤–¥—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ó–µ—Ä–∫–∞–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –∞ –¥—É—à—É.",
        "–ø—Ä–æ–º–ø—Ç": "–ó–µ—Ä–∫–∞–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –∞ –¥—É—à—É."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ö–æ–Ω—å-–æ–≥–æ–Ω—ë–∫",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–µ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –∫–æ–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –±–µ–∂–∏—Ç –ø–æ –Ω–µ–±—É.",
        "–ø—Ä–æ–º–ø—Ç": "–ì–µ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –∫–æ–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –±–µ–∂–∏—Ç –ø–æ –Ω–µ–±—É."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–û–≥–æ–Ω—å, –≤–æ–¥–∞ –∏... –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏, –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—Ü–∞.",
        "–ø—Ä–æ–º–ø—Ç": "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏, –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—Ü–∞."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–î–µ—Ä–µ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–Ω–∏—Ç –≤—Å—ë",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–µ—Ä–æ–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–µ—Ä–µ–≤–∞, –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç—å –∑–ª–æ–¥–µ—è.",
        "–ø—Ä–æ–º–ø—Ç": "–ì–µ—Ä–æ–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–µ—Ä–µ–≤–∞, –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç—å –∑–ª–æ–¥–µ—è."
    },
    {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–¶–∞—Ä—Å—Ç–≤–æ, –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–æ—Ä–æ–¥ –∑–∞—Å—Ç—ã–ª –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è.",
        "–ø—Ä–æ–º–ø—Ç": "–ì–æ—Ä–æ–¥ –∑–∞—Å—Ç—ã–ª –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è."
    }
]
chosen_plot = random.choice(PLOT_TEMPLATES)
print(f"\n{COLORS['–≠—Ç–∞–ø']}üéØ –¢–ï–ú–ê –°–ö–ê–ó–ö–ò: {chosen_plot["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}{COLORS['ENDC']}\n")

CAMPBELL_STAGES = [
    "1. –û–±—ã—á–Ω—ã–π –º–∏—Ä",
    "2. –ü—Ä–∏–∑—ã–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é",
    "3. –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∏–∑—ã–≤–∞",
    "4. –í—Å—Ç—Ä–µ—á–∞ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º",
    "5. –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ—Ä–æ–≥–∞",
    "6. –ò—Å–ø—ã—Ç–∞–Ω–∏—è, —Å–æ—é–∑–Ω–∏–∫–∏, –≤—Ä–∞–≥–∏",
    "7. –ü–æ–¥–∑–µ–º–µ–ª—å–µ: –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–µ—â–µ—Ä–µ",
    "8. –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è: –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –æ–≥–Ω—ë–º",
    "9. –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ",
    "10. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –¥–∞—Ä–æ–º"
]

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ ===
narrator = Agent("–†–∞—Å—Å–∫–∞–∑—á–∏–∫", "–¢—ã ‚Äî –≤–æ–ª—à–µ–±–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤ —Å—Ç–∏–ª–µ –Ω–∞—Ä–æ–¥–Ω–æ–π —Å–∫–∞–∑–∫–∏.")
child = Agent("–†–µ–±—ë–Ω–æ–∫", "–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫ 7 –ª–µ—Ç. –†–µ–∞–≥–∏—Ä—É–π –ø–æ-—Ä—É—Å—Å–∫–∏: –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å–∏ –∏–∑–º–µ–Ω–∏—Ç—å.")
editor = Agent("–†–µ–¥–∞–∫—Ç–æ—Ä", "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—è–π –ª–æ–≥–∏–∫—É —Å–∫–∞–∑–∫–∏.")

# === –•—Ä–∞–Ω–µ–Ω–∏–µ ===
history = []
full_tale = []
video_files = []
# –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –¥–ª—è PDF –≤ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
pdf_timeline = []


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def generate_image(prompt, filename="stage_image.png"):
    short_prompt = " ".join(prompt.split(" ")[:50])  # –ü–µ—Ä–≤—ã–µ 50 —Å–ª–æ–≤
    full_prompt = (
        f"–ê–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º–∞, —Ä—É—Å—Å–∫–∞—è –Ω–∞—Ä–æ–¥–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚Äî {short_prompt}. "
        "Impressionist watercolor, dreamy light, Russian fairy tale, 4k"
    )
    image = pipe_sdxl(prompt=full_prompt, num_inference_steps=4, guidance_scale=0.0).images[0]

    os.makedirs("static", exist_ok=True)
    img_path = f"static/{filename}"
    image.save(img_path)

    print(f"üñºÔ∏è –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {img_path}")

    # –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
    try:
        image.show()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    return img_path


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ===
def generate_video(image_path, prompt, output_path="video.mp4"):
    if not args.generate_video:
        return None

    short_prompt = " ".join(prompt.split()[:70])
    image = Image.open(image_path).convert("RGB")
    image = image.resize((1024, 576))

    print(f"üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: {short_prompt[:60]}...")

    frames = pipe_svd(
        image,
        decode_chunk_size=8,
        generator=torch.manual_seed(42),
        motion_bucket_id=120,
        noise_aug_strength=0.02,
        num_frames=25,
        frame_rate=6
    ).frames[0]

    export_to_video(frames, output_path, fps=6)
    print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    return output_path


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
for stage in CAMPBELL_STAGES:
    print(f"\n{'=' * 70}")
    print(f"{COLORS['–≠—Ç–∞–ø']}{stage.upper()}{COLORS['ENDC']}")
    print(f"{'=' * 70}")

    # PDF: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞
    pdf_timeline.append({"type": "header", "text": stage.upper()})

    stage_prompt = f"–†–∞—Å—Å–∫–∞–∂–∏ —ç—Ç–∞–ø —Å–∫–∞–∑–∫–∏: {stage}. –¢–µ–º–∞: {chosen_plot}. –£—á—Ç–∏: {history[-2:] if history else '–Ω–∞—á–∞–ª–æ'}"
    tale_fragment = narrator.respond(stage_prompt)
    history.append({"role": "–†–∞—Å—Å–∫–∞–∑—á–∏–∫", "content": tale_fragment})
    full_tale.append(f"**{stage}**\n{tale_fragment}")

    # –î–∏–∞–ª–æ–≥
    print(f"\n{COLORS['–†–∞—Å—Å–∫–∞–∑—á–∏–∫']}üí¨ {tale_fragment}{COLORS['ENDC']}")
    pdf_timeline.append({"type": "agent", "role": "–†–∞—Å—Å–∫–∞–∑—á–∏–∫", "text": tale_fragment})

    child_resp = child.respond(f"–¢—ã —É—Å–ª—ã—à–∞–ª: {tale_fragment}...")
    print(f"\n{COLORS['–†–µ–±—ë–Ω–æ–∫']}üí¨ {child_resp}{COLORS['ENDC']}")
    history.append({"role": "–†–µ–±—ë–Ω–æ–∫", "content": child_resp})
    pdf_timeline.append({"type": "agent", "role": "–†–µ–±—ë–Ω–æ–∫", "text": child_resp})

    editor_resp = editor.respond(f"–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–∫—É: {tale_fragment}")
    print(f"\n{COLORS['–†–µ–¥–∞–∫—Ç–æ—Ä']}üí¨ {editor_resp}{COLORS['ENDC']}")
    history.append({"role": "–†–µ–¥–∞–∫—Ç–æ—Ä", "content": editor_resp})
    pdf_timeline.append({"type": "agent", "role": "–†–µ–¥–∞–∫—Ç–æ—Ä", "text": editor_resp})

    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤—ã
    print(f"\n{COLORS['–°–∫–∞–∑–∫–∞']}üìñ –¢–ï–ö–°–¢ –°–ö–ê–ó–ö–ò:{COLORS['ENDC']}")
    print(f"{tale_fragment}\n")
    pdf_timeline.append({"type": "story", "text": tale_fragment})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ä–∞–∑—É
    img_filename = f"stage_{CAMPBELL_STAGES.index(stage) + 1}.png"
    img_path = generate_image(tale_fragment, img_filename)
    pdf_timeline.append({"type": "image", "path": img_path})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if args.generate_video:
        video_filename = f"video_stage_{CAMPBELL_STAGES.index(stage) + 1}.mp4"
        video_path = generate_video(img_path, tale_fragment, f"static/{video_filename}")
        if video_path:
            video_files.append(video_path)

# === –§–∏–Ω–∞–ª ===
print(f"\n{'=' * 70}")
print(f"{COLORS['–°–∫–∞–∑–∫–∞']}üìú –ü–û–õ–ù–ê–Ø –°–ö–ê–ó–ö–ê{COLORS['ENDC']}")
print(f"{'=' * 70}")

for part in full_tale:
    print(f"\n{part}\n")
    print(f"{'-' * 50}")

if args.generate_video:
    print(f"\n{COLORS['–í–∏–¥–µ–æ']}üé¨ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:{COLORS['ENDC']}")
    for v in video_files:
        print(f"‚Üí {v}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF ===
def _wrap_text(draw, text, font, max_width):
    lines = []
    for paragraph in text.split("\n"):
        words = paragraph.split(" ")
        if not words:
            lines.append("")
            continue
        cur = ""
        for w in words:
            test = (cur + (" " if cur else "") + w)
            w_px = draw.textlength(test, font=font)
            if w_px <= max_width:
                cur = test
            else:
                if cur:
                    lines.append(cur)
                cur = w
        if cur:
            lines.append(cur)
    return lines


def generate_pdf(timeline, output_path="static/tale.pdf"):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ A4 –≤ –ø–∏–∫—Å–µ–ª—è—Ö (150 DPI): 1240x1754
    PAGE_W, PAGE_H = 1240, 1754
    MARGIN = 60
    CONTENT_W = PAGE_W - 2 * MARGIN

    # –®—Ä–∏—Ñ—Ç—ã
    try:
        font_title = ImageFont.truetype("arial.ttf", 40)
        font_role = ImageFont.truetype("arial.ttf", 28)
        font_text = ImageFont.truetype("arial.ttf", 26)
    except Exception:
        font_title = ImageFont.load_default()
        font_role = ImageFont.load_default()
        font_text = ImageFont.load_default()

    pages = []
    page = Image.new("RGB", (PAGE_W, PAGE_H), "white")
    draw = ImageDraw.Draw(page)
    y = MARGIN

    # –ó–∞–≥–ª–∞–≤–∏–µ —Å —Ç–µ–º–æ–π —Å–∫–∞–∑–∫–∏
    title = f"–¢–ï–ú–ê –°–ö–ê–ó–ö–ò: {chosen_plot['–Ω–∞–∑–≤–∞–Ω–∏–µ']}"
    title_lines = _wrap_text(draw, title, font_title, CONTENT_W)
    for line in title_lines:
        draw.text((MARGIN, y), line, fill="black", font=font_title)
        y += int(font_title.size * 1.3)
    y += 10

    subtitle = f"–û–ø–∏—Å–∞–Ω–∏–µ: {chosen_plot['–æ–ø–∏—Å–∞–Ω–∏–µ']}"
    for line in _wrap_text(draw, subtitle, font_text, CONTENT_W):
        draw.text((MARGIN, y), line, fill="black", font=font_text)
        y += int(font_text.size * 1.4)

    y += 20

    def new_page():
        nonlocal page, draw, y
        pages.append(page)
        page = Image.new("RGB", (PAGE_W, PAGE_H), "white")
        draw = ImageDraw.Draw(page)
        y = MARGIN

    for item in timeline:
        itype = item.get("type")
        if itype == "header":
            block = item.get("text", "")
            block_lines = _wrap_text(draw, block, font_title, CONTENT_W)
            needed_h = len(block_lines) * int(font_title.size * 1.3) + 20
            if y + needed_h > PAGE_H - MARGIN:
                new_page()
            for line in block_lines:
                draw.text((MARGIN, y), line, fill="black", font=font_title)
                y += int(font_title.size * 1.3)
            y += 10
        elif itype == "agent":
            role = item.get("role", "")
            text = item.get("text", "")
            role_label = f"{role}:"
            role_h = int(font_role.size * 1.4)
            text_lines = _wrap_text(draw, text, font_text, CONTENT_W)
            text_h = len(text_lines) * int(font_text.size * 1.4)
            needed_h = role_h + text_h + 12
            if y + needed_h > PAGE_H - MARGIN:
                new_page()
            draw.text((MARGIN, y), role_label, fill="black", font=font_role)
            y += role_h
            for line in text_lines:
                draw.text((MARGIN, y), line, fill="black", font=font_text)
                y += int(font_text.size * 1.4)
            y += 12
        elif itype == "story":
            label = "–¢–ï–ö–°–¢ –°–ö–ê–ó–ö–ò:"
            label_h = int(font_role.size * 1.4)
            text = item.get("text", "")
            text_lines = _wrap_text(draw, text, font_text, CONTENT_W)
            text_h = len(text_lines) * int(font_text.size * 1.4)
            needed_h = label_h + text_h + 12
            if y + needed_h > PAGE_H - MARGIN:
                new_page()
            draw.text((MARGIN, y), label, fill="black", font=font_role)
            y += label_h
            for line in text_lines:
                draw.text((MARGIN, y), line, fill="black", font=font_text)
                y += int(font_text.size * 1.4)
            y += 12
        elif itype == "image":
            img_path = item.get("path")
            if not img_path or not os.path.exists(img_path):
                continue
            try:
                img = Image.open(img_path).convert("RGB")
            except Exception:
                continue
            max_w = CONTENT_W
            max_h = int(PAGE_H * 0.45)  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã—Å–æ—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            w, h = img.size
            scale = min(max_w / w, max_h / h, 1.0)
            new_w = int(w * scale)
            new_h = int(h * scale)
            if y + new_h > PAGE_H - MARGIN:
                new_page()
            img_resized = img.resize((new_w, new_h))
            page.paste(img_resized, (MARGIN, y))
            y += new_h + 16
        elif itype == "video":
            # –î–æ–±–∞–≤–∏–º –∑–∞–º–µ—Ç–∫—É –æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–µ
            note = f"–í–∏–¥–µ–æ: {os.path.basename(item.get('path', ''))}"
            lines = _wrap_text(draw, note, font_text, CONTENT_W)
            needed_h = len(lines) * int(font_text.size * 1.4) + 8
            if y + needed_h > PAGE_H - MARGIN:
                new_page()
            for line in lines:
                draw.text((MARGIN, y), line, fill="black", font=font_text)
                y += int(font_text.size * 1.4)
            y += 8

    # –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if video_files:
        if y + int(font_title.size * 1.3) + 20 > PAGE_H - MARGIN:
            new_page()
        draw.text((MARGIN, y), "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ:", fill="black", font=font_title)
        y += int(font_title.size * 1.3) + 10
        for v in video_files:
            entry = f"‚Üí {os.path.basename(v)}"
            for line in _wrap_text(draw, entry, font_text, CONTENT_W):
                if y + int(font_text.size * 1.4) > PAGE_H - MARGIN:
                    new_page()
                draw.text((MARGIN, y), line, fill="black", font=font_text)
                y += int(font_text.size * 1.4)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF
    pages.append(page)
    first, rest = pages[0], pages[1:]
    first.save(output_path, "PDF", resolution=150.0, save_all=True, append_images=rest)
    print(f"üìÑ PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–π —Å–∫–∞–∑–∫–∏
try:
    generate_pdf(pdf_timeline, output_path="static/tale.pdf")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {e}")